import React, { useEffect, useRef } from "react";
import Matter from "matter-js";

const greenCoin = () => (
  <svg
    width="169"
    height="144"
    viewBox="0 0 169 144"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <g clip-path="url(#clip0_130_2531)">
      <path
        d="M115.512 61.0775C102.98 43.8289 78.7463 39.9883 61.495 52.522C44.2438 65.0558 40.4078 89.2904 52.9396 106.539C65.4714 123.788 89.7053 127.628 106.957 115.094C124.208 102.561 128.044 78.326 115.512 61.0775ZM108.779 87.6971L102.576 79.159C101.827 81.6004 100.511 83.8714 98.7264 85.8232L103.091 91.8299L97.4022 95.9628L93.0428 89.9627C86.6615 92.8622 79.096 91.6942 73.9237 86.9647L69.0163 106.868L62.1938 105.188L70.6054 71.0425L77.2487 80.1863C79.9392 83.8894 84.5964 85.2841 88.7558 84.0621L76.7378 67.5208L82.4262 63.3879L94.4442 79.9292C96.8917 76.3511 97.0044 71.4908 94.3139 67.7877L88.1146 59.2551L93.803 55.1222L114.467 83.5642L108.779 87.6971Z"
        fill="#1DF6A7"
      />
      <path
        d="M132.767 48.541C113.398 21.8821 75.6205 15.8964 48.959 35.2671C22.2974 54.6379 16.3163 92.4164 35.6851 119.075C55.0539 145.734 92.8317 151.72 119.493 132.349C146.155 112.978 152.136 75.1999 132.767 48.541ZM47.2515 110.672C32.4393 90.2845 36.9752 61.6457 57.3625 46.8335C77.7497 32.0213 106.389 36.5573 121.201 56.9445C136.013 77.3317 131.477 105.971 111.09 120.783C90.7025 135.595 62.0637 131.059 47.2515 110.672Z"
        fill="#1DF6A7"
      />
    </g>
    <path
      d="M36.4219 42.0703C36.8906 41.5313 37.3594 41.0391 37.8281 40.5235C38.1094 40.2188 38.1094 39.7266 37.8047 39.4453C37.5 39.1641 37.0078 39.1641 36.7266 39.4688C36.2344 39.9844 35.7422 40.5235 35.2734 41.0625C34.9922 41.3907 35.0391 41.8594 35.3437 42.1407C35.6719 42.4219 36.1406 42.3985 36.4219 42.0703Z"
      fill="#D9D9D9"
    />
    <path
      d="M40.6641 37.7109C43.4766 35.0625 46.5703 32.6719 49.8281 30.5859C50.1797 30.3516 50.2969 29.8828 50.0625 29.5312C49.8281 29.1797 49.3594 29.0625 49.0078 29.2969C45.6797 31.4297 42.5156 33.8906 39.6328 36.5859C39.3281 36.8672 39.3047 37.3594 39.5859 37.6641C39.8906 37.9687 40.3594 37.9922 40.6641 37.7109Z"
      fill="#D9D9D9"
    />
    <path
      d="M132.891 124.125C132.446 124.664 131.977 125.203 131.531 125.742C131.25 126.07 131.297 126.539 131.602 126.82C131.93 127.102 132.399 127.055 132.68 126.75C133.149 126.211 133.617 125.649 134.086 125.109C134.344 124.781 134.297 124.313 133.992 124.031C133.641 123.75 133.149 123.797 132.891 124.125Z"
      fill="#D9D9D9"
    />
    <path
      d="M128.789 128.648C126.07 131.391 123.07 133.898 119.93 136.078C119.578 136.313 119.508 136.805 119.742 137.133C119.977 137.484 120.469 137.555 120.797 137.32C124.031 135.094 127.078 132.516 129.867 129.727C130.172 129.422 130.172 128.953 129.867 128.648C129.562 128.344 129.094 128.344 128.789 128.648Z"
      fill="#D9D9D9"
    />
    <defs>
      <clipPath id="clip0_130_2531">
        <rect
          width="120"
          height="120"
          fill="white"
          transform="translate(97.5) rotate(54)"
        />
      </clipPath>
    </defs>
  </svg>
);
const whiteCoin = () => (
  <svg
    width="169"
    height="144"
    viewBox="0 0 169 144"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <g clip-path="url(#clip0_130_2531)">
      <path
        d="M115.512 61.0775C102.98 43.8289 78.7463 39.9883 61.495 52.522C44.2438 65.0558 40.4078 89.2904 52.9396 106.539C65.4714 123.788 89.7053 127.628 106.957 115.094C124.208 102.561 128.044 78.326 115.512 61.0775ZM108.779 87.6971L102.576 79.159C101.827 81.6004 100.511 83.8714 98.7264 85.8232L103.091 91.8299L97.4022 95.9628L93.0428 89.9627C86.6615 92.8622 79.096 91.6942 73.9237 86.9647L69.0163 106.868L62.1938 105.188L70.6054 71.0425L77.2487 80.1863C79.9392 83.8894 84.5964 85.2841 88.7558 84.0621L76.7378 67.5208L82.4262 63.3879L94.4442 79.9292C96.8917 76.3511 97.0044 71.4908 94.3139 67.7877L88.1146 59.2551L93.803 55.1222L114.467 83.5642L108.779 87.6971Z"
        fill="#1DF6A7"
      />
      <path
        d="M132.767 48.541C113.398 21.8821 75.6205 15.8964 48.959 35.2671C22.2974 54.6379 16.3163 92.4164 35.6851 119.075C55.0539 145.734 92.8317 151.72 119.493 132.349C146.155 112.978 152.136 75.1999 132.767 48.541ZM47.2515 110.672C32.4393 90.2845 36.9752 61.6457 57.3625 46.8335C77.7497 32.0213 106.389 36.5573 121.201 56.9445C136.013 77.3317 131.477 105.971 111.09 120.783C90.7025 135.595 62.0637 131.059 47.2515 110.672Z"
        fill="#1DF6A7"
      />
    </g>
    <path
      d="M36.4219 42.0703C36.8906 41.5313 37.3594 41.0391 37.8281 40.5235C38.1094 40.2188 38.1094 39.7266 37.8047 39.4453C37.5 39.1641 37.0078 39.1641 36.7266 39.4688C36.2344 39.9844 35.7422 40.5235 35.2734 41.0625C34.9922 41.3907 35.0391 41.8594 35.3437 42.1407C35.6719 42.4219 36.1406 42.3985 36.4219 42.0703Z"
      fill="#D9D9D9"
    />
    <path
      d="M40.6641 37.7109C43.4766 35.0625 46.5703 32.6719 49.8281 30.5859C50.1797 30.3516 50.2969 29.8828 50.0625 29.5312C49.8281 29.1797 49.3594 29.0625 49.0078 29.2969C45.6797 31.4297 42.5156 33.8906 39.6328 36.5859C39.3281 36.8672 39.3047 37.3594 39.5859 37.6641C39.8906 37.9687 40.3594 37.9922 40.6641 37.7109Z"
      fill="#D9D9D9"
    />
    <path
      d="M132.891 124.125C132.446 124.664 131.977 125.203 131.531 125.742C131.25 126.07 131.297 126.539 131.602 126.82C131.93 127.102 132.399 127.055 132.68 126.75C133.149 126.211 133.617 125.649 134.086 125.109C134.344 124.781 134.297 124.313 133.992 124.031C133.641 123.75 133.149 123.797 132.891 124.125Z"
      fill="#D9D9D9"
    />
    <path
      d="M128.789 128.648C126.07 131.391 123.07 133.898 119.93 136.078C119.578 136.313 119.508 136.805 119.742 137.133C119.977 137.484 120.469 137.555 120.797 137.32C124.031 135.094 127.078 132.516 129.867 129.727C130.172 129.422 130.172 128.953 129.867 128.648C129.562 128.344 129.094 128.344 128.789 128.648Z"
      fill="#D9D9D9"
    />
    <defs>
      <clipPath id="clip0_130_2531">
        <rect
          width="120"
          height="120"
          fill="white"
          transform="translate(97.5) rotate(54)"
        />
      </clipPath>
    </defs>
  </svg>
);
const tick = () => (
  <svg
    width="110"
    height="110"
    viewBox="0 0 110 110"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M91.29 36.1476L83.8163 32.6634C82.0425 31.8362 80.0413 29.654 79.3705 27.811L76.5504 20.0628C75.2089 16.377 71.102 14.4619 67.4165 15.8011L59.6652 18.6224C57.8242 19.2924 54.8626 19.1612 53.0889 18.3351L45.6162 14.8505C42.0656 13.1948 37.8033 14.7462 36.1476 18.2968L32.6644 25.7735C31.8361 27.5478 29.6477 29.55 27.8107 30.2187C27.8107 30.2187 23.7434 31.699 20.0625 33.0388C16.3816 34.3785 14.4626 38.4868 15.8041 42.1726L18.6243 49.921C19.2925 51.7568 19.1653 54.7227 18.3377 56.4959L14.8521 63.9689C13.1944 67.5203 14.7458 71.7826 18.2999 73.4417L25.7736 76.9259C27.5485 77.7527 29.5512 79.9423 30.2194 81.7783L33.0396 89.5267C34.3797 93.2086 38.492 95.1261 42.1728 93.7864L49.9212 90.9662C51.7621 90.2962 54.7229 90.4252 56.4967 91.2515L63.9701 94.7381C67.5201 96.3918 71.7824 94.8405 73.4388 91.2918L76.9227 83.8171C77.751 82.0428 79.9355 80.0419 81.7764 79.3719L89.5277 76.5507C93.2125 75.2095 95.1262 71.0987 93.7861 67.4168L90.9659 59.6684C90.2948 57.8246 90.4259 54.8664 91.2525 53.0936L94.7381 45.6205C96.3902 42.0665 94.8387 37.804 91.29 36.1476ZM54.9614 71.7934L34.8114 62.3956L37.823 55.939L51.5163 62.3243L64.6621 34.1416L71.1182 37.1523L54.9614 71.7934Z"
      fill="#006FFF"
    />
    <path
      d="M54.9614 71.7934L34.8114 62.3956L37.823 55.939L51.5163 62.3243L64.6622 34.1416L71.1182 37.1523L54.9614 71.7934Z"
      fill="white"
    />
  </svg>
);
const MatterBox = () => {
  const canvasRef = useRef(null);

  useEffect(() => {
    const Engine = Matter.Engine;
    const Render = Matter.Render;
    const Runner = Matter.Runner;
    const Composites = Matter.Composites;
    const Common = Matter.Common;
    const Composite = Matter.Composite;
    const Bodies = Matter.Bodies;
    const Mouse = Matter.Mouse;
    const MouseConstraint = Matter.MouseConstraint;

    // Create engine and world
    const engine = Engine.create();
    const world = engine.world;

    // Create renderer
    const render = Render.create({
      canvas: canvasRef.current,
      engine: engine,
      options: {
        width: 800,
        height: 600,
        showAngleIndicator: true,
        wireframes: false, // Optional: Set to true to enable wireframes
      },
    });

    Render.run(render);

    // Create runner
    const runner = Runner.create();
    Runner.run(runner, engine);

    // Add stack of mixed shapes
    const stack = Composites.stack(20, 20, 10, 5, 0, 0, (x, y) => {
      const sides = Math.round(Common.random(1, 8));
      const chamfer =
        sides > 2 && Common.random() > 0.7 ? { radius: 10 } : null;

      switch (Math.round(Common.random(0, 1))) {
        case 0:
          if (Common.random() < 0.8) {
            return Bodies.rectangle(
              x,
              y,
              Common.random(25, 50),
              Common.random(25, 50),
              { chamfer }
            );
          } else {
            return Bodies.rectangle(
              x,
              y,
              Common.random(80, 120),
              Common.random(25, 30),
              { chamfer }
            );
          }
        case 1:
          return Bodies.polygon(x, y, sides, Common.random(25, 50), {
            chamfer,
          });
        default:
          return null;
      }
    });

    Composite.add(world, stack);

    // Add static walls
    Composite.add(world, [
      Bodies.rectangle(400, 0, 800, 50, { isStatic: true }),
      Bodies.rectangle(400, 600, 800, 50, { isStatic: true }),
      Bodies.rectangle(800, 300, 50, 600, { isStatic: true }),
      Bodies.rectangle(0, 300, 50, 600, { isStatic: true }),
    ]);

    // Add mouse control
    const mouse = Mouse.create(render.canvas);
    const mouseConstraint = MouseConstraint.create(engine, {
      mouse: mouse,
      constraint: {
        stiffness: 0.2,
        render: { visible: false },
      },
    });

    Composite.add(world, mouseConstraint);

    // Keep the mouse in sync with rendering
    render.mouse = mouse;

    // Fit the render viewport to the scene
    Render.lookAt(render, {
      min: { x: 0, y: 0 },
      max: { x: 800, y: 600 },
    });

    // Cleanup on unmount
    return () => {
      Matter.Render.stop(render);
      Matter.Runner.stop(runner);
      Matter.World.clear(world);
      Matter.Engine.clear(engine);
    };
  }, []);

  return <canvas ref={canvasRef} />;
};

export default MatterBox;
